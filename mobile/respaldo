
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IonicModule } from '@ionic/angular';
import { AudioPlayerService } from './../../services/player-service';
// Si es en el componente (recomendado para standalone)
import { addIcons } from 'ionicons';
import { pause, play, close, arrowBackOutline } from 'ionicons/icons';

addIcons({
  pause,
  play,
  close,
  'arrow-back-outline': arrowBackOutline
});
@Component({
  selector: 'app-global-player',
  standalone: true,
  imports: [CommonModule, IonicModule],
styles: [`
  .floating-player {
    position: fixed;
    bottom: 80px;
    right: 16px;
    z-index: 9999;
    background: #ffffff;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    border-radius: 10px; /* más cuadrado */
    width: 90%;
    max-width: 200px;
    overflow: hidden;
    border: 1px solid #ddd;
  }

  @media (min-width: 768px) {
    .floating-player {
      bottom: 24px;
      right: 24px;
    }
  }

  .player-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 14px;
  }

  .player-title {
    font-size: 14px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 180px;
  }

  .player-controls ion-button {
    margin-left: 4px;
  }
`],

  template: `
    <div class="floating-player" *ngIf="state?.source">
      <div class="player-toolbar">
        <div class="player-title">{{ state.source?.title || 'Reproduciendo' }}</div>
        <div class="player-controls">
          <ion-button fill="clear" size="small" (click)="toggle()">
            <ion-icon [name]="state.isPlaying ? 'pause' : 'play'"></ion-icon>
          </ion-button>
          <ion-button fill="clear" size="small" color="danger" (click)="close()">
            <ion-icon name="close"></ion-icon>
          </ion-button>
        </div>
      </div>
    </div>
  `
})

export class AppGlobalPlayerComponent {
  state = this.audio.snapshot; // ✅ usa el getter definido en el servicio

  constructor(public audio: AudioPlayerService) {
    this.audio.state$.subscribe(s => (this.state = s));
  }

  toggle() {
    this.audio.toggle();
  }
  close() {
  this.audio.pause();
  this.audio.clear(); // Limpia el estado (ver siguiente paso)
}

}





antiguo




<ion-content>
  <div class="back-button" (click)="goBack()">
    <ion-icon name="arrow-back-outline"></ion-icon>
  </div>

  <div class="follow-us-container">
    <h2 class="page-title">Reproductor</h2>
  </div>

  <ng-container *ngIf="podcastActivo; else listaPodcasts">
    <div class="reproductor-expandido">
      <!-- Botón cerrar en esquina superior izquierda -->
      <ion-button
        fill="clear"
        (click)="cerrarReproductor()"
        style="position: absolute; top: 8px; left: 8px; z-index: 10; color: #000;">
        <ion-icon name="chevron-down-outline"></ion-icon>
      </ion-button>

      <!-- Imagen centrada -->
      <div class="reproductor-imagen">
        <img [src]="podcastActivo.imagenUrl" alt="Podcast actual" />
      </div>

      <!-- Título del episodio -->
      <h3 class="episode-title">{{ podcastActivo.titulo }}</h3>

      <!-- Tiempo de reproducción -->
      <div class="reproductor-tiempo">
        {{ tiempoActual }} / {{ podcastActivo.duracion }}
      </div>
      <ion-range
        min="0"
        [max]="audioRef?.nativeElement?.duration || 0"
        [value]="audioRef?.nativeElement?.currentTime || 0"
        (ionChange)="onSeek($event)"
        step="1"
      ></ion-range>

      <!-- Controles -->
      <div class="reproductor-controles">
            <!-- Botón de opciones (izquierda) -->
        <ion-button class="control-button lateral" fill="clear" (click)="opciones(podcastActivo)">
          <ion-icon name="ellipsis-vertical-outline"></ion-icon>
        </ion-button>

        <!-- Botones centrales sin cambios -->
        <ion-button fill="clear" (click)="anterior()">
          <ion-icon name="play-skip-back-outline"></ion-icon>
        </ion-button>

        <ion-button fill="clear" (click)="togglePlay()">
          <ion-icon [name]="enReproduccion ? 'pause-circle-outline' : 'play-circle-outline'"></ion-icon>
        </ion-button>

        <ion-button fill="clear" (click)="siguiente()">
          <ion-icon name="play-skip-forward-outline"></ion-icon>
        </ion-button>

        <!-- Botón de favorito (derecha) -->
       <ion-button class="control-button lateral" fill="clear" (click)="toggleFavorite()">
          <ion-icon [name]="isFavorite ? 'heart' : 'heart-outline'"></ion-icon>
        </ion-button>

      </div>
    </div>
  </ng-container>

  <!-- Lista de podcasts -->
  <ng-template #listaPodcasts>
 <div *ngFor="let podcast of podcasts">
  <ion-card class="podcast-card">
    <div class="podcast-card-content">
      <!-- Imagen a la izquierda -->
      <div class="podcast-image">
        <img [src]="podcast.imagenUrl" alt="Portada podcast" />
      </div>

      <!-- Info en el centro -->
      <div class="podcast-info">
        <h3 class="podcast-title">{{ podcast.titulo }}</h3>
        <p class="podcast-episode">Episodio {{ podcast.episodio }}</p>
        <p class="podcast-duration">{{ podcast.duracion }}</p>
      </div>

      <!-- Botón a la derecha -->
      <div class="podcast-action">
        <ion-button fill="clear" (click)="reproducir(podcast)">
          <ion-icon name="play-circle-outline" slot="icon-only"></ion-icon>
        </ion-button>
      </div>
    </div>
  </ion-card>
</div>

  </ng-template>
</ion-content>
<audio #audio hidden (timeupdate)="actualizarTiempo()" (ended)="siguiente()"></audio>

<ion-footer>
  <app-footer></app-footer>
</ion-footer>


